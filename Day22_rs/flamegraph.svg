<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="2413978624403"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (673,498,386,104 samples, 27.90%)</title><rect x="48.2711%" y="261" width="27.8999%" height="15" fill="rgb(227,0,7)" fg:x="1165254416279" fg:w="673498386104"/><text x="48.5211%" y="271.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::In..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (673,498,386,104 samples, 27.90%)</title><rect x="48.2711%" y="245" width="27.8999%" height="15" fill="rgb(217,0,24)" fg:x="1165254416279" fg:w="673498386104"/><text x="48.5211%" y="255.50">core::slice::index::&lt;impl core::ops::index::I..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (673,498,386,104 samples, 27.90%)</title><rect x="48.2711%" y="229" width="27.8999%" height="15" fill="rgb(221,193,54)" fg:x="1165254416279" fg:w="673498386104"/><text x="48.5211%" y="239.50">&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;..</text></g><g><title>[unknown] (472,146,911 samples, 0.02%)</title><rect x="76.1515%" y="213" width="0.0196%" height="15" fill="rgb(248,212,6)" fg:x="1838280655472" fg:w="472146911"/><text x="76.4015%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (1,832,598,793,980 samples, 75.92%)</title><rect x="0.2874%" y="325" width="75.9161%" height="15" fill="rgb(208,68,35)" fg:x="6937505694" fg:w="1832598793980"/><text x="0.5374%" y="335.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (1,832,598,793,980 samples, 75.92%)</title><rect x="0.2874%" y="309" width="75.9161%" height="15" fill="rgb(232,128,0)" fg:x="6937505694" fg:w="1832598793980"/><text x="0.5374%" y="319.50">core::iter::traits::iterator::Iterator::find_map::check::_{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,832,598,793,980 samples, 75.92%)</title><rect x="0.2874%" y="293" width="75.9161%" height="15" fill="rgb(207,160,47)" fg:x="6937505694" fg:w="1832598793980"/><text x="0.5374%" y="303.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>Day22_rs::main::_{{closure}}::_{{closure}} (1,832,598,793,980 samples, 75.92%)</title><rect x="0.2874%" y="277" width="75.9161%" height="15" fill="rgb(228,23,34)" fg:x="6937505694" fg:w="1832598793980"/><text x="0.5374%" y="287.50">Day22_rs::main::_{{closure}}::_{{closure}}</text></g><g><title>[unknown] (783,497,291 samples, 0.03%)</title><rect x="76.1710%" y="261" width="0.0325%" height="15" fill="rgb(218,30,26)" fg:x="1838752802383" fg:w="783497291"/><text x="76.4210%" y="271.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (115,616,923,957 samples, 4.79%)</title><rect x="76.2571%" y="309" width="4.7895%" height="15" fill="rgb(220,122,19)" fg:x="1840829557006" fg:w="115616923957"/><text x="76.5071%" y="319.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,949,515,102,828 samples, 80.76%)</title><rect x="0.2874%" y="389" width="80.7594%" height="15" fill="rgb(250,228,42)" fg:x="6937505694" fg:w="1949515102828"/><text x="0.5374%" y="399.50">&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1,949,515,102,828 samples, 80.76%)</title><rect x="0.2874%" y="373" width="80.7594%" height="15" fill="rgb(240,193,28)" fg:x="6937505694" fg:w="1949515102828"/><text x="0.5374%" y="383.50">core::iter::traits::iterator::Iterator::find_map</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,949,515,102,828 samples, 80.76%)</title><rect x="0.2874%" y="357" width="80.7594%" height="15" fill="rgb(216,20,37)" fg:x="6937505694" fg:w="1949515102828"/><text x="0.5374%" y="367.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,949,515,102,828 samples, 80.76%)</title><rect x="0.2874%" y="341" width="80.7594%" height="15" fill="rgb(206,188,39)" fg:x="6937505694" fg:w="1949515102828"/><text x="0.5374%" y="351.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (116,916,308,848 samples, 4.84%)</title><rect x="76.2035%" y="325" width="4.8433%" height="15" fill="rgb(217,207,13)" fg:x="1839536299674" fg:w="116916308848"/><text x="76.4535%" y="335.50">&lt;core:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (349,798,737 samples, 0.01%)</title><rect x="81.0468%" y="389" width="0.0145%" height="15" fill="rgb(231,73,38)" fg:x="1956452608522" fg:w="349798737"/><text x="81.2968%" y="399.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (318,436,389 samples, 0.01%)</title><rect x="81.0481%" y="373" width="0.0132%" height="15" fill="rgb(225,20,46)" fg:x="1956483970870" fg:w="318436389"/><text x="81.2981%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (253,484,669 samples, 0.01%)</title><rect x="81.6493%" y="149" width="0.0105%" height="15" fill="rgb(210,31,41)" fg:x="1970996553300" fg:w="253484669"/><text x="81.8993%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,299,502,412 samples, 0.05%)</title><rect x="81.6126%" y="213" width="0.0538%" height="15" fill="rgb(221,200,47)" fg:x="1970109854336" fg:w="1299502412"/><text x="81.8626%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,299,502,412 samples, 0.05%)</title><rect x="81.6126%" y="197" width="0.0538%" height="15" fill="rgb(226,26,5)" fg:x="1970109854336" fg:w="1299502412"/><text x="81.8626%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,299,502,412 samples, 0.05%)</title><rect x="81.6126%" y="181" width="0.0538%" height="15" fill="rgb(249,33,26)" fg:x="1970109854336" fg:w="1299502412"/><text x="81.8626%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (668,758,641 samples, 0.03%)</title><rect x="81.6387%" y="165" width="0.0277%" height="15" fill="rgb(235,183,28)" fg:x="1970740598107" fg:w="668758641"/><text x="81.8887%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (378,378,653 samples, 0.02%)</title><rect x="81.6725%" y="165" width="0.0157%" height="15" fill="rgb(221,5,38)" fg:x="1971556566468" fg:w="378378653"/><text x="81.9225%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (353,617,184 samples, 0.01%)</title><rect x="81.6735%" y="149" width="0.0146%" height="15" fill="rgb(247,18,42)" fg:x="1971581327937" fg:w="353617184"/><text x="81.9235%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (353,617,184 samples, 0.01%)</title><rect x="81.6735%" y="133" width="0.0146%" height="15" fill="rgb(241,131,45)" fg:x="1971581327937" fg:w="353617184"/><text x="81.9235%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,903,512,140 samples, 0.08%)</title><rect x="81.6103%" y="229" width="0.0789%" height="15" fill="rgb(249,31,29)" fg:x="1970054680172" fg:w="1903512140"/><text x="81.8603%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (409,967,181 samples, 0.02%)</title><rect x="81.6721%" y="213" width="0.0170%" height="15" fill="rgb(225,111,53)" fg:x="1971548225131" fg:w="409967181"/><text x="81.9221%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (405,606,088 samples, 0.02%)</title><rect x="81.6723%" y="197" width="0.0168%" height="15" fill="rgb(238,160,17)" fg:x="1971552586224" fg:w="405606088"/><text x="81.9223%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u64 (405,606,088 samples, 0.02%)</title><rect x="81.6723%" y="181" width="0.0168%" height="15" fill="rgb(214,148,48)" fg:x="1971552586224" fg:w="405606088"/><text x="81.9223%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (1,985,906,294 samples, 0.08%)</title><rect x="81.6072%" y="245" width="0.0823%" height="15" fill="rgb(232,36,49)" fg:x="1969979986925" fg:w="1985906294"/><text x="81.8572%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (287,868,203 samples, 0.01%)</title><rect x="81.8041%" y="197" width="0.0119%" height="15" fill="rgb(209,103,24)" fg:x="1974732461914" fg:w="287868203"/><text x="82.0541%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (287,868,203 samples, 0.01%)</title><rect x="81.8041%" y="181" width="0.0119%" height="15" fill="rgb(229,88,8)" fg:x="1974732461914" fg:w="287868203"/><text x="82.0541%" y="191.50"></text></g><g><title>hashbrown::raw::h2 (543,480,769 samples, 0.02%)</title><rect x="81.8229%" y="197" width="0.0225%" height="15" fill="rgb(213,181,19)" fg:x="1975187398200" fg:w="543480769"/><text x="82.0729%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5,291,546,747 samples, 0.22%)</title><rect x="81.8454%" y="197" width="0.2192%" height="15" fill="rgb(254,191,54)" fg:x="1975730878969" fg:w="5291546747"/><text x="82.0954%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5,291,546,747 samples, 0.22%)</title><rect x="81.8454%" y="181" width="0.2192%" height="15" fill="rgb(241,83,37)" fg:x="1975730878969" fg:w="5291546747"/><text x="82.0954%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (11,183,639,481 samples, 0.46%)</title><rect x="81.6044%" y="293" width="0.4633%" height="15" fill="rgb(233,36,39)" fg:x="1969913184716" fg:w="11183639481"/><text x="81.8544%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (11,183,639,481 samples, 0.46%)</title><rect x="81.6044%" y="277" width="0.4633%" height="15" fill="rgb(226,3,54)" fg:x="1969913184716" fg:w="11183639481"/><text x="81.8544%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (11,183,639,481 samples, 0.46%)</title><rect x="81.6044%" y="261" width="0.4633%" height="15" fill="rgb(245,192,40)" fg:x="1969913184716" fg:w="11183639481"/><text x="81.8544%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9,130,930,978 samples, 0.38%)</title><rect x="81.6895%" y="245" width="0.3783%" height="15" fill="rgb(238,167,29)" fg:x="1971965893219" fg:w="9130930978"/><text x="81.9395%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9,130,930,978 samples, 0.38%)</title><rect x="81.6895%" y="229" width="0.3783%" height="15" fill="rgb(232,182,51)" fg:x="1971965893219" fg:w="9130930978"/><text x="81.9395%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (9,130,930,978 samples, 0.38%)</title><rect x="81.6895%" y="213" width="0.3783%" height="15" fill="rgb(231,60,39)" fg:x="1971965893219" fg:w="9130930978"/><text x="81.9395%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (545,207,024 samples, 0.02%)</title><rect x="82.1295%" y="181" width="0.0226%" height="15" fill="rgb(208,69,12)" fg:x="1982588369221" fg:w="545207024"/><text x="82.3795%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (660,186,440 samples, 0.03%)</title><rect x="82.1857%" y="165" width="0.0273%" height="15" fill="rgb(235,93,37)" fg:x="1983946115422" fg:w="660186440"/><text x="82.4357%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,439,667,488 samples, 0.14%)</title><rect x="82.0847%" y="229" width="0.1425%" height="15" fill="rgb(213,116,39)" fg:x="1981506986072" fg:w="3439667488"/><text x="82.3347%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,439,667,488 samples, 0.14%)</title><rect x="82.0847%" y="213" width="0.1425%" height="15" fill="rgb(222,207,29)" fg:x="1981506986072" fg:w="3439667488"/><text x="82.3347%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,439,667,488 samples, 0.14%)</title><rect x="82.0847%" y="197" width="0.1425%" height="15" fill="rgb(206,96,30)" fg:x="1981506986072" fg:w="3439667488"/><text x="82.3347%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,813,077,315 samples, 0.08%)</title><rect x="82.1521%" y="181" width="0.0751%" height="15" fill="rgb(218,138,4)" fg:x="1983133576245" fg:w="1813077315"/><text x="82.4021%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (340,351,698 samples, 0.01%)</title><rect x="82.2131%" y="165" width="0.0141%" height="15" fill="rgb(250,191,14)" fg:x="1984606301862" fg:w="340351698"/><text x="82.4631%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (372,012,560 samples, 0.02%)</title><rect x="82.2570%" y="133" width="0.0154%" height="15" fill="rgb(239,60,40)" fg:x="1985666359033" fg:w="372012560"/><text x="82.5070%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,039,862,937 samples, 0.04%)</title><rect x="82.2337%" y="181" width="0.0431%" height="15" fill="rgb(206,27,48)" fg:x="1985102805862" fg:w="1039862937"/><text x="82.4837%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (946,012,087 samples, 0.04%)</title><rect x="82.2375%" y="165" width="0.0392%" height="15" fill="rgb(225,35,8)" fg:x="1985196656712" fg:w="946012087"/><text x="82.4875%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (946,012,087 samples, 0.04%)</title><rect x="82.2375%" y="149" width="0.0392%" height="15" fill="rgb(250,213,24)" fg:x="1985196656712" fg:w="946012087"/><text x="82.4875%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (4,848,796,091 samples, 0.20%)</title><rect x="82.0769%" y="261" width="0.2009%" height="15" fill="rgb(247,123,22)" fg:x="1981318554791" fg:w="4848796091"/><text x="82.3269%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4,848,796,091 samples, 0.20%)</title><rect x="82.0769%" y="245" width="0.2009%" height="15" fill="rgb(231,138,38)" fg:x="1981318554791" fg:w="4848796091"/><text x="82.3269%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,094,378,314 samples, 0.05%)</title><rect x="82.2324%" y="229" width="0.0453%" height="15" fill="rgb(231,145,46)" fg:x="1985072972568" fg:w="1094378314"/><text x="82.4824%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1,082,282,848 samples, 0.04%)</title><rect x="82.2329%" y="213" width="0.0448%" height="15" fill="rgb(251,118,11)" fg:x="1985085068034" fg:w="1082282848"/><text x="82.4829%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u64 (1,082,282,848 samples, 0.04%)</title><rect x="82.2329%" y="197" width="0.0448%" height="15" fill="rgb(217,147,25)" fg:x="1985085068034" fg:w="1082282848"/><text x="82.4829%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (299,956,708 samples, 0.01%)</title><rect x="82.2916%" y="181" width="0.0124%" height="15" fill="rgb(247,81,37)" fg:x="1986501789807" fg:w="299956708"/><text x="82.5416%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (929,797,878 samples, 0.04%)</title><rect x="82.3070%" y="117" width="0.0385%" height="15" fill="rgb(209,12,38)" fg:x="1986872478111" fg:w="929797878"/><text x="82.5570%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (929,797,878 samples, 0.04%)</title><rect x="82.3070%" y="101" width="0.0385%" height="15" fill="rgb(227,1,9)" fg:x="1986872478111" fg:w="929797878"/><text x="82.5570%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (929,797,878 samples, 0.04%)</title><rect x="82.3070%" y="85" width="0.0385%" height="15" fill="rgb(248,47,43)" fg:x="1986872478111" fg:w="929797878"/><text x="82.5570%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (454,836,954 samples, 0.02%)</title><rect x="82.3266%" y="69" width="0.0188%" height="15" fill="rgb(221,10,30)" fg:x="1987347439035" fg:w="454836954"/><text x="82.5766%" y="79.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (265,605,509 samples, 0.01%)</title><rect x="82.3477%" y="69" width="0.0110%" height="15" fill="rgb(210,229,1)" fg:x="1987855062371" fg:w="265605509"/><text x="82.5977%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (242,099,414 samples, 0.01%)</title><rect x="82.3486%" y="53" width="0.0100%" height="15" fill="rgb(222,148,37)" fg:x="1987878568466" fg:w="242099414"/><text x="82.5986%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (242,099,414 samples, 0.01%)</title><rect x="82.3486%" y="37" width="0.0100%" height="15" fill="rgb(234,67,33)" fg:x="1987878568466" fg:w="242099414"/><text x="82.5986%" y="47.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (1,369,492,143 samples, 0.06%)</title><rect x="82.3040%" y="165" width="0.0567%" height="15" fill="rgb(247,98,35)" fg:x="1986801746516" fg:w="1369492143"/><text x="82.5540%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (1,369,492,143 samples, 0.06%)</title><rect x="82.3040%" y="149" width="0.0567%" height="15" fill="rgb(247,138,52)" fg:x="1986801746516" fg:w="1369492143"/><text x="82.5540%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,314,857,361 samples, 0.05%)</title><rect x="82.3063%" y="133" width="0.0545%" height="15" fill="rgb(213,79,30)" fg:x="1986856381298" fg:w="1314857361"/><text x="82.5563%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (332,034,166 samples, 0.01%)</title><rect x="82.3470%" y="117" width="0.0138%" height="15" fill="rgb(246,177,23)" fg:x="1987839204493" fg:w="332034166"/><text x="82.5970%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (327,422,767 samples, 0.01%)</title><rect x="82.3472%" y="101" width="0.0136%" height="15" fill="rgb(230,62,27)" fg:x="1987843815892" fg:w="327422767"/><text x="82.5972%" y="111.50"></text></g><g><title>core::hash::Hasher::write_u64 (327,422,767 samples, 0.01%)</title><rect x="82.3472%" y="85" width="0.0136%" height="15" fill="rgb(216,154,8)" fg:x="1987843815892" fg:w="327422767"/><text x="82.5972%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (1,392,791,171 samples, 0.06%)</title><rect x="82.3040%" y="181" width="0.0577%" height="15" fill="rgb(244,35,45)" fg:x="1986801746516" fg:w="1392791171"/><text x="82.5540%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (343,122,628 samples, 0.01%)</title><rect x="82.3690%" y="149" width="0.0142%" height="15" fill="rgb(251,115,12)" fg:x="1988369854468" fg:w="343122628"/><text x="82.6190%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (266,141,485 samples, 0.01%)</title><rect x="82.3832%" y="149" width="0.0110%" height="15" fill="rgb(240,54,50)" fg:x="1988712977096" fg:w="266141485"/><text x="82.6332%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (817,717,959 samples, 0.03%)</title><rect x="82.3617%" y="165" width="0.0339%" height="15" fill="rgb(233,84,52)" fg:x="1988194537687" fg:w="817717959"/><text x="82.6117%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (876,984,007 samples, 0.04%)</title><rect x="82.3617%" y="181" width="0.0363%" height="15" fill="rgb(207,117,47)" fg:x="1988194537687" fg:w="876984007"/><text x="82.6117%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2,914,201,406 samples, 0.12%)</title><rect x="82.2784%" y="245" width="0.1207%" height="15" fill="rgb(249,43,39)" fg:x="1986181836059" fg:w="2914201406"/><text x="82.5284%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,667,312,147 samples, 0.11%)</title><rect x="82.2886%" y="229" width="0.1105%" height="15" fill="rgb(209,38,44)" fg:x="1986428725318" fg:w="2667312147"/><text x="82.5386%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2,667,312,146 samples, 0.11%)</title><rect x="82.2886%" y="213" width="0.1105%" height="15" fill="rgb(236,212,23)" fg:x="1986428725319" fg:w="2667312146"/><text x="82.5386%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2,667,312,146 samples, 0.11%)</title><rect x="82.2886%" y="197" width="0.1105%" height="15" fill="rgb(242,79,21)" fg:x="1986428725319" fg:w="2667312146"/><text x="82.5386%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (804,739,137 samples, 0.03%)</title><rect x="82.4048%" y="229" width="0.0333%" height="15" fill="rgb(211,96,35)" fg:x="1989233932459" fg:w="804739137"/><text x="82.6548%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (804,739,137 samples, 0.03%)</title><rect x="82.4048%" y="213" width="0.0333%" height="15" fill="rgb(253,215,40)" fg:x="1989233932459" fg:w="804739137"/><text x="82.6548%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (290,366,437 samples, 0.01%)</title><rect x="82.4431%" y="229" width="0.0120%" height="15" fill="rgb(211,81,21)" fg:x="1990158726125" fg:w="290366437"/><text x="82.6931%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1,105,802,034 samples, 0.05%)</title><rect x="82.4551%" y="229" width="0.0458%" height="15" fill="rgb(208,190,38)" fg:x="1990449092562" fg:w="1105802034"/><text x="82.7051%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (858,002,681 samples, 0.04%)</title><rect x="82.4654%" y="213" width="0.0355%" height="15" fill="rgb(235,213,38)" fg:x="1990696891915" fg:w="858002681"/><text x="82.7154%" y="223.50"></text></g><g><title>hashbrown::raw::is_full (858,002,681 samples, 0.04%)</title><rect x="82.4654%" y="197" width="0.0355%" height="15" fill="rgb(237,122,38)" fg:x="1990696891915" fg:w="858002681"/><text x="82.7154%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (1,232,428,903 samples, 0.05%)</title><rect x="82.5011%" y="229" width="0.0511%" height="15" fill="rgb(244,218,35)" fg:x="1991559042961" fg:w="1232428903"/><text x="82.7511%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (488,113,495 samples, 0.02%)</title><rect x="82.5527%" y="229" width="0.0202%" height="15" fill="rgb(240,68,47)" fg:x="1992803575976" fg:w="488113495"/><text x="82.8027%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (488,113,495 samples, 0.02%)</title><rect x="82.5527%" y="213" width="0.0202%" height="15" fill="rgb(210,16,53)" fg:x="1992803575976" fg:w="488113495"/><text x="82.8027%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (7,312,243,797 samples, 0.30%)</title><rect x="82.2778%" y="261" width="0.3029%" height="15" fill="rgb(235,124,12)" fg:x="1986167350882" fg:w="7312243797"/><text x="82.5278%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (4,383,557,214 samples, 0.18%)</title><rect x="82.3991%" y="245" width="0.1816%" height="15" fill="rgb(224,169,11)" fg:x="1989096037465" fg:w="4383557214"/><text x="82.6491%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4,057,628,789 samples, 0.17%)</title><rect x="82.5807%" y="245" width="0.1681%" height="15" fill="rgb(250,166,2)" fg:x="1993479594679" fg:w="4057628789"/><text x="82.8307%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4,057,628,789 samples, 0.17%)</title><rect x="82.5807%" y="229" width="0.1681%" height="15" fill="rgb(242,216,29)" fg:x="1993479594679" fg:w="4057628789"/><text x="82.8307%" y="239.50"></text></g><g><title>core::ptr::write (4,057,628,789 samples, 0.17%)</title><rect x="82.5807%" y="213" width="0.1681%" height="15" fill="rgb(230,116,27)" fg:x="1993479594679" fg:w="4057628789"/><text x="82.8307%" y="223.50"></text></g><g><title>Day22_rs::next_delta::_{{closure}} (28,733,026,333 samples, 1.19%)</title><rect x="81.5962%" y="309" width="1.1903%" height="15" fill="rgb(228,99,48)" fg:x="1969715123672" fg:w="28733026333"/><text x="81.8462%" y="319.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (17,351,325,808 samples, 0.72%)</title><rect x="82.0677%" y="293" width="0.7188%" height="15" fill="rgb(253,11,6)" fg:x="1981096824197" fg:w="17351325808"/><text x="82.3177%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17,337,840,163 samples, 0.72%)</title><rect x="82.0683%" y="277" width="0.7182%" height="15" fill="rgb(247,143,39)" fg:x="1981110309842" fg:w="17337840163"/><text x="82.3183%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (4,968,555,326 samples, 0.21%)</title><rect x="82.5807%" y="261" width="0.2058%" height="15" fill="rgb(236,97,10)" fg:x="1993479594679" fg:w="4968555326"/><text x="82.8307%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (803,358,720 samples, 0.03%)</title><rect x="82.7532%" y="245" width="0.0333%" height="15" fill="rgb(233,208,19)" fg:x="1997644791285" fg:w="803358720"/><text x="83.0032%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (297,179,845 samples, 0.01%)</title><rect x="82.7742%" y="229" width="0.0123%" height="15" fill="rgb(216,164,2)" fg:x="1998150970160" fg:w="297179845"/><text x="83.0242%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (297,179,845 samples, 0.01%)</title><rect x="82.7742%" y="213" width="0.0123%" height="15" fill="rgb(220,129,5)" fg:x="1998150970160" fg:w="297179845"/><text x="83.0242%" y="223.50"></text></g><g><title>Day22_rs::next_delta (29,055,907,794 samples, 1.20%)</title><rect x="81.5861%" y="357" width="1.2037%" height="15" fill="rgb(242,17,10)" fg:x="1969471001598" fg:w="29055907794"/><text x="81.8361%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (28,811,785,720 samples, 1.19%)</title><rect x="81.5962%" y="341" width="1.1935%" height="15" fill="rgb(242,107,0)" fg:x="1969715123672" fg:w="28811785720"/><text x="81.8462%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (28,811,785,720 samples, 1.19%)</title><rect x="81.5962%" y="325" width="1.1935%" height="15" fill="rgb(251,28,31)" fg:x="1969715123672" fg:w="28811785720"/><text x="81.8462%" y="335.50"></text></g><g><title>Day22_rs::memoized_original_next_delta_i (29,192,760,678 samples, 1.21%)</title><rect x="81.5816%" y="373" width="1.2093%" height="15" fill="rgb(233,223,10)" fg:x="1969363229986" fg:w="29192760678"/><text x="81.8316%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (905,731,354 samples, 0.04%)</title><rect x="82.8065%" y="325" width="0.0375%" height="15" fill="rgb(215,21,27)" fg:x="1998930649408" fg:w="905731354"/><text x="83.0565%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (905,731,354 samples, 0.04%)</title><rect x="82.8065%" y="309" width="0.0375%" height="15" fill="rgb(232,23,21)" fg:x="1998930649408" fg:w="905731354"/><text x="83.0565%" y="319.50"></text></g><g><title>core::cell::BorrowRefMut::new (905,731,354 samples, 0.04%)</title><rect x="82.8065%" y="293" width="0.0375%" height="15" fill="rgb(244,5,23)" fg:x="1998930649408" fg:w="905731354"/><text x="83.0565%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (106,274,306,137 samples, 4.40%)</title><rect x="82.8494%" y="181" width="4.4025%" height="15" fill="rgb(226,81,46)" fg:x="1999967294308" fg:w="106274306137"/><text x="83.0994%" y="191.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (106,274,306,137 samples, 4.40%)</title><rect x="82.8494%" y="165" width="4.4025%" height="15" fill="rgb(247,70,30)" fg:x="1999967294308" fg:w="106274306137"/><text x="83.0994%" y="175.50">alloc..</text></g><g><title>alloc::alloc::alloc (106,274,306,137 samples, 4.40%)</title><rect x="82.8494%" y="149" width="4.4025%" height="15" fill="rgb(212,68,19)" fg:x="1999967294308" fg:w="106274306137"/><text x="83.0994%" y="159.50">alloc..</text></g><g><title>malloc (106,055,646,867 samples, 4.39%)</title><rect x="82.8585%" y="133" width="4.3934%" height="15" fill="rgb(240,187,13)" fg:x="2000185953578" fg:w="106055646867"/><text x="83.1085%" y="143.50">malloc</text></g><g><title>_int_malloc (74,818,222,986 samples, 3.10%)</title><rect x="84.1525%" y="117" width="3.0994%" height="15" fill="rgb(223,113,26)" fg:x="2031423377459" fg:w="74818222986"/><text x="84.4025%" y="127.50">_in..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (107,580,859,781 samples, 4.46%)</title><rect x="82.8448%" y="245" width="4.4566%" height="15" fill="rgb(206,192,2)" fg:x="1999854771409" fg:w="107580859781"/><text x="83.0948%" y="255.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (107,580,859,781 samples, 4.46%)</title><rect x="82.8448%" y="229" width="4.4566%" height="15" fill="rgb(241,108,4)" fg:x="1999854771409" fg:w="107580859781"/><text x="83.0948%" y="239.50">alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (107,580,859,781 samples, 4.46%)</title><rect x="82.8448%" y="213" width="4.4566%" height="15" fill="rgb(247,173,49)" fg:x="1999854771409" fg:w="107580859781"/><text x="83.0948%" y="223.50">alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (107,580,859,781 samples, 4.46%)</title><rect x="82.8448%" y="197" width="4.4566%" height="15" fill="rgb(224,114,35)" fg:x="1999854771409" fg:w="107580859781"/><text x="83.0948%" y="207.50">alloc..</text></g><g><title>alloc::raw_vec::layout_array (1,194,030,374 samples, 0.05%)</title><rect x="87.2519%" y="181" width="0.0495%" height="15" fill="rgb(245,159,27)" fg:x="2106241600816" fg:w="1194030374"/><text x="87.5019%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1,194,030,374 samples, 0.05%)</title><rect x="87.2519%" y="165" width="0.0495%" height="15" fill="rgb(245,172,44)" fg:x="2106241600816" fg:w="1194030374"/><text x="87.5019%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1,194,030,374 samples, 0.05%)</title><rect x="87.2519%" y="149" width="0.0495%" height="15" fill="rgb(236,23,11)" fg:x="2106241600816" fg:w="1194030374"/><text x="87.5019%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1,105,898,676 samples, 0.05%)</title><rect x="87.2555%" y="133" width="0.0458%" height="15" fill="rgb(205,117,38)" fg:x="2106329732514" fg:w="1105898676"/><text x="87.5055%" y="143.50"></text></g><g><title>__memmove_avx512_unaligned_erms (220,393,291,046 samples, 9.13%)</title><rect x="87.3023%" y="213" width="9.1299%" height="15" fill="rgb(237,72,25)" fg:x="2107459345868" fg:w="220393291046"/><text x="87.5523%" y="223.50">__memmove_avx..</text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (328,059,902,422 samples, 13.59%)</title><rect x="82.8440%" y="325" width="13.5900%" height="15" fill="rgb(244,70,9)" fg:x="1999836380762" fg:w="328059902422"/><text x="83.0940%" y="335.50">core::option::Option&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (328,059,902,422 samples, 13.59%)</title><rect x="82.8440%" y="309" width="13.5900%" height="15" fill="rgb(217,125,39)" fg:x="1999836380762" fg:w="328059902422"/><text x="83.0940%" y="319.50">&lt;alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (328,041,511,775 samples, 13.59%)</title><rect x="82.8448%" y="293" width="13.5892%" height="15" fill="rgb(235,36,10)" fg:x="1999854771409" fg:w="328041511775"/><text x="83.0948%" y="303.50">alloc::slice::&lt;impl [..</text></g><g><title>alloc::slice::hack::to_vec (328,041,511,775 samples, 13.59%)</title><rect x="82.8448%" y="277" width="13.5892%" height="15" fill="rgb(251,123,47)" fg:x="1999854771409" fg:w="328041511775"/><text x="83.0948%" y="287.50">alloc::slice::hack::t..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (328,041,511,775 samples, 13.59%)</title><rect x="82.8448%" y="261" width="13.5892%" height="15" fill="rgb(221,13,13)" fg:x="1999854771409" fg:w="328041511775"/><text x="83.0948%" y="271.50">&lt;T as alloc::slice::h..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (220,460,651,994 samples, 9.13%)</title><rect x="87.3013%" y="245" width="9.1327%" height="15" fill="rgb(238,131,9)" fg:x="2107435631190" fg:w="220460651994"/><text x="87.5513%" y="255.50">core::ptr::co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (220,460,651,994 samples, 9.13%)</title><rect x="87.3013%" y="229" width="9.1327%" height="15" fill="rgb(211,50,8)" fg:x="2107435631190" fg:w="220460651994"/><text x="87.5513%" y="239.50">core::intrins..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::collections::hash::map::HashMap&lt;(u64,u16),alloc::vec::Vec&lt;(u8,i8)&gt;&gt;&gt;&gt; (7,744,374,890 samples, 0.32%)</title><rect x="96.4340%" y="325" width="0.3208%" height="15" fill="rgb(245,182,24)" fg:x="2327896283184" fg:w="7744374890"/><text x="96.6840%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (7,744,374,890 samples, 0.32%)</title><rect x="96.4340%" y="309" width="0.3208%" height="15" fill="rgb(242,14,37)" fg:x="2327896283184" fg:w="7744374890"/><text x="96.6840%" y="319.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (7,744,374,890 samples, 0.32%)</title><rect x="96.4340%" y="293" width="0.3208%" height="15" fill="rgb(246,228,12)" fg:x="2327896283184" fg:w="7744374890"/><text x="96.6840%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (7,744,374,890 samples, 0.32%)</title><rect x="96.4340%" y="277" width="0.3208%" height="15" fill="rgb(213,55,15)" fg:x="2327896283184" fg:w="7744374890"/><text x="96.6840%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (7,744,374,890 samples, 0.32%)</title><rect x="96.4340%" y="261" width="0.3208%" height="15" fill="rgb(209,9,3)" fg:x="2327896283184" fg:w="7744374890"/><text x="96.6840%" y="271.50"></text></g><g><title>core::mem::replace (7,744,374,890 samples, 0.32%)</title><rect x="96.4340%" y="245" width="0.3208%" height="15" fill="rgb(230,59,30)" fg:x="2327896283184" fg:w="7744374890"/><text x="96.6840%" y="255.50"></text></g><g><title>core::ptr::write (7,744,374,890 samples, 0.32%)</title><rect x="96.4340%" y="229" width="0.3208%" height="15" fill="rgb(209,121,21)" fg:x="2327896283184" fg:w="7744374890"/><text x="96.6840%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (817,668,509 samples, 0.03%)</title><rect x="96.9085%" y="197" width="0.0339%" height="15" fill="rgb(220,109,13)" fg:x="2339350520715" fg:w="817668509"/><text x="97.1585%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (778,950,506 samples, 0.03%)</title><rect x="96.9896%" y="181" width="0.0323%" height="15" fill="rgb(232,18,1)" fg:x="2341309189364" fg:w="778950506"/><text x="97.2396%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4,914,716,302 samples, 0.20%)</title><rect x="96.8390%" y="245" width="0.2036%" height="15" fill="rgb(215,41,42)" fg:x="2337672863543" fg:w="4914716302"/><text x="97.0890%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4,914,716,302 samples, 0.20%)</title><rect x="96.8390%" y="229" width="0.2036%" height="15" fill="rgb(224,123,36)" fg:x="2337672863543" fg:w="4914716302"/><text x="97.0890%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4,914,716,302 samples, 0.20%)</title><rect x="96.8390%" y="213" width="0.2036%" height="15" fill="rgb(240,125,3)" fg:x="2337672863543" fg:w="4914716302"/><text x="97.0890%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,419,390,621 samples, 0.10%)</title><rect x="96.9424%" y="197" width="0.1002%" height="15" fill="rgb(205,98,50)" fg:x="2340168189224" fg:w="2419390621"/><text x="97.1924%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (499,439,975 samples, 0.02%)</title><rect x="97.0219%" y="181" width="0.0207%" height="15" fill="rgb(205,185,37)" fg:x="2342088139870" fg:w="499439975"/><text x="97.2719%" y="191.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,974,898,099 samples, 0.08%)</title><rect x="97.0426%" y="245" width="0.0818%" height="15" fill="rgb(238,207,15)" fg:x="2342587579845" fg:w="1974898099"/><text x="97.2926%" y="255.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (828,886,676 samples, 0.03%)</title><rect x="97.0901%" y="229" width="0.0343%" height="15" fill="rgb(213,199,42)" fg:x="2343733591268" fg:w="828886676"/><text x="97.3401%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (828,886,676 samples, 0.03%)</title><rect x="97.0901%" y="213" width="0.0343%" height="15" fill="rgb(235,201,11)" fg:x="2343733591268" fg:w="828886676"/><text x="97.3401%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (828,886,676 samples, 0.03%)</title><rect x="97.0901%" y="197" width="0.0343%" height="15" fill="rgb(207,46,11)" fg:x="2343733591268" fg:w="828886676"/><text x="97.3401%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,501,899,658 samples, 0.06%)</title><rect x="97.1275%" y="181" width="0.0622%" height="15" fill="rgb(241,35,35)" fg:x="2344637485642" fg:w="1501899658"/><text x="97.3775%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,404,333,110 samples, 0.06%)</title><rect x="97.1316%" y="165" width="0.0582%" height="15" fill="rgb(243,32,47)" fg:x="2344735052190" fg:w="1404333110"/><text x="97.3816%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,404,333,110 samples, 0.06%)</title><rect x="97.1316%" y="149" width="0.0582%" height="15" fill="rgb(247,202,23)" fg:x="2344735052190" fg:w="1404333110"/><text x="97.3816%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (755,460,431 samples, 0.03%)</title><rect x="97.1584%" y="133" width="0.0313%" height="15" fill="rgb(219,102,11)" fg:x="2345383924869" fg:w="755460431"/><text x="97.4084%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (1,596,858,629 samples, 0.07%)</title><rect x="97.1264%" y="213" width="0.0662%" height="15" fill="rgb(243,110,44)" fg:x="2344610381940" fg:w="1596858629"/><text x="97.3764%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u16 (1,596,858,629 samples, 0.07%)</title><rect x="97.1264%" y="197" width="0.0662%" height="15" fill="rgb(222,74,54)" fg:x="2344610381940" fg:w="1596858629"/><text x="97.3764%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (418,198,461 samples, 0.02%)</title><rect x="97.3436%" y="117" width="0.0173%" height="15" fill="rgb(216,99,12)" fg:x="2349854840740" fg:w="418198461"/><text x="97.5936%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,467,324,847 samples, 0.06%)</title><rect x="97.3154%" y="133" width="0.0608%" height="15" fill="rgb(226,22,26)" fg:x="2349173628110" fg:w="1467324847"/><text x="97.5654%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (367,913,756 samples, 0.02%)</title><rect x="97.3610%" y="117" width="0.0152%" height="15" fill="rgb(217,163,10)" fg:x="2350273039201" fg:w="367913756"/><text x="97.6110%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (795,631,185 samples, 0.03%)</title><rect x="97.3762%" y="133" width="0.0330%" height="15" fill="rgb(213,25,53)" fg:x="2350640952957" fg:w="795631185"/><text x="97.6262%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4,701,039,859 samples, 0.19%)</title><rect x="97.2291%" y="181" width="0.1947%" height="15" fill="rgb(252,105,26)" fg:x="2347090628647" fg:w="4701039859"/><text x="97.4791%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4,472,834,783 samples, 0.19%)</title><rect x="97.2386%" y="165" width="0.1853%" height="15" fill="rgb(220,39,43)" fg:x="2347318833723" fg:w="4472834783"/><text x="97.4886%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,472,834,783 samples, 0.19%)</title><rect x="97.2386%" y="149" width="0.1853%" height="15" fill="rgb(229,68,48)" fg:x="2347318833723" fg:w="4472834783"/><text x="97.4886%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (355,084,364 samples, 0.01%)</title><rect x="97.4092%" y="133" width="0.0147%" height="15" fill="rgb(252,8,32)" fg:x="2351436584142" fg:w="355084364"/><text x="97.6592%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (15,190,756,199 samples, 0.63%)</title><rect x="96.7972%" y="277" width="0.6293%" height="15" fill="rgb(223,20,43)" fg:x="2336662758094" fg:w="15190756199"/><text x="97.0472%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15,086,029,491 samples, 0.62%)</title><rect x="96.8015%" y="261" width="0.6249%" height="15" fill="rgb(229,81,49)" fg:x="2336767484802" fg:w="15086029491"/><text x="97.0515%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7,291,036,349 samples, 0.30%)</title><rect x="97.1244%" y="245" width="0.3020%" height="15" fill="rgb(236,28,36)" fg:x="2344562477944" fg:w="7291036349"/><text x="97.3744%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (7,243,132,353 samples, 0.30%)</title><rect x="97.1264%" y="229" width="0.3000%" height="15" fill="rgb(249,185,26)" fg:x="2344610381940" fg:w="7243132353"/><text x="97.3764%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (5,646,273,724 samples, 0.23%)</title><rect x="97.1925%" y="213" width="0.2339%" height="15" fill="rgb(249,174,33)" fg:x="2346207240569" fg:w="5646273724"/><text x="97.4425%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u64 (5,646,273,724 samples, 0.23%)</title><rect x="97.1925%" y="197" width="0.2339%" height="15" fill="rgb(233,201,37)" fg:x="2346207240569" fg:w="5646273724"/><text x="97.4425%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (737,411,860 samples, 0.03%)</title><rect x="98.2497%" y="229" width="0.0305%" height="15" fill="rgb(221,78,26)" fg:x="2371727469197" fg:w="737411860"/><text x="98.4997%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (737,411,860 samples, 0.03%)</title><rect x="98.2497%" y="213" width="0.0305%" height="15" fill="rgb(250,127,30)" fg:x="2371727469197" fg:w="737411860"/><text x="98.4997%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (453,254,597 samples, 0.02%)</title><rect x="98.2819%" y="229" width="0.0188%" height="15" fill="rgb(230,49,44)" fg:x="2372504771380" fg:w="453254597"/><text x="98.5319%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (290,141,967 samples, 0.01%)</title><rect x="98.2887%" y="213" width="0.0120%" height="15" fill="rgb(229,67,23)" fg:x="2372667884010" fg:w="290141967"/><text x="98.5387%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (290,141,967 samples, 0.01%)</title><rect x="98.2887%" y="197" width="0.0120%" height="15" fill="rgb(249,83,47)" fg:x="2372667884010" fg:w="290141967"/><text x="98.5387%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (290,141,967 samples, 0.01%)</title><rect x="98.2887%" y="181" width="0.0120%" height="15" fill="rgb(215,43,3)" fg:x="2372667884010" fg:w="290141967"/><text x="98.5387%" y="191.50"></text></g><g><title>core::num::&lt;impl isize&gt;::unchecked_neg (290,141,967 samples, 0.01%)</title><rect x="98.2887%" y="165" width="0.0120%" height="15" fill="rgb(238,154,13)" fg:x="2372667884010" fg:w="290141967"/><text x="98.5387%" y="175.50"></text></g><g><title>hashbrown::raw::h2 (1,087,504,355 samples, 0.05%)</title><rect x="98.3075%" y="229" width="0.0451%" height="15" fill="rgb(219,56,2)" fg:x="2373122788740" fg:w="1087504355"/><text x="98.5575%" y="239.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (41,418,250,834 samples, 1.72%)</title><rect x="96.7548%" y="325" width="1.7158%" height="15" fill="rgb(233,0,4)" fg:x="2335640658074" fg:w="41418250834"/><text x="97.0048%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (41,418,250,834 samples, 1.72%)</title><rect x="96.7548%" y="309" width="1.7158%" height="15" fill="rgb(235,30,7)" fg:x="2335640658074" fg:w="41418250834"/><text x="97.0048%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (41,418,250,834 samples, 1.72%)</title><rect x="96.7548%" y="293" width="1.7158%" height="15" fill="rgb(250,79,13)" fg:x="2335640658074" fg:w="41418250834"/><text x="97.0048%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (25,205,394,615 samples, 1.04%)</title><rect x="97.4264%" y="277" width="1.0441%" height="15" fill="rgb(211,146,34)" fg:x="2351853514293" fg:w="25205394615"/><text x="97.6764%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (25,205,394,615 samples, 1.04%)</title><rect x="97.4264%" y="261" width="1.0441%" height="15" fill="rgb(228,22,38)" fg:x="2351853514293" fg:w="25205394615"/><text x="97.6764%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (25,205,394,615 samples, 1.04%)</title><rect x="97.4264%" y="245" width="1.0441%" height="15" fill="rgb(235,168,5)" fg:x="2351853514293" fg:w="25205394615"/><text x="97.6764%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,848,615,813 samples, 0.12%)</title><rect x="98.3526%" y="229" width="0.1180%" height="15" fill="rgb(221,155,16)" fg:x="2374210293095" fg:w="2848615813"/><text x="98.6026%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,848,615,813 samples, 0.12%)</title><rect x="98.3526%" y="213" width="0.1180%" height="15" fill="rgb(215,215,53)" fg:x="2374210293095" fg:w="2848615813"/><text x="98.6026%" y="223.50"></text></g><g><title>Day22_rs::next_delta_i::_{{closure}} (378,411,849,396 samples, 15.68%)</title><rect x="82.7956%" y="341" width="15.6759%" height="15" fill="rgb(223,4,10)" fg:x="1998668930857" fg:w="378411849396"/><text x="83.0456%" y="351.50">Day22_rs::next_delta_i::..</text></g><g><title>Day22_rs::next_delta_i (420,374,160,651 samples, 17.41%)</title><rect x="81.0613%" y="389" width="17.4142%" height="15" fill="rgb(234,103,6)" fg:x="1956802407259" fg:w="420374160651"/><text x="81.3113%" y="399.50">Day22_rs::next_delta_i</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (378,617,546,903 samples, 15.68%)</title><rect x="82.7911%" y="373" width="15.6844%" height="15" fill="rgb(227,97,0)" fg:x="1998559021007" fg:w="378617546903"/><text x="83.0411%" y="383.50">std::thread::local::Loca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (378,572,026,798 samples, 15.68%)</title><rect x="82.7930%" y="357" width="15.6825%" height="15" fill="rgb(234,150,53)" fg:x="1998604541112" fg:w="378572026798"/><text x="83.0430%" y="367.50">std::thread::local::Loca..</text></g><g><title>__rdl_dealloc (2,455,206,316 samples, 0.10%)</title><rect x="98.6477%" y="293" width="0.1017%" height="15" fill="rgb(228,201,54)" fg:x="2381333272607" fg:w="2455206316"/><text x="98.8977%" y="303.50"></text></g><g><title>__rust_dealloc (468,244,695 samples, 0.02%)</title><rect x="98.7494%" y="293" width="0.0194%" height="15" fill="rgb(222,22,37)" fg:x="2383788478923" fg:w="468244695"/><text x="98.9994%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(u8,i8)&gt;&gt; (35,119,710,953 samples, 1.45%)</title><rect x="98.4780%" y="389" width="1.4548%" height="15" fill="rgb(237,53,32)" fg:x="2377237170810" fg:w="35119710953"/><text x="98.7280%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,i8)&gt;&gt; (31,044,415,435 samples, 1.29%)</title><rect x="98.6468%" y="373" width="1.2860%" height="15" fill="rgb(233,25,53)" fg:x="2381312466328" fg:w="31044415435"/><text x="98.8968%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31,044,415,435 samples, 1.29%)</title><rect x="98.6468%" y="357" width="1.2860%" height="15" fill="rgb(210,40,34)" fg:x="2381312466328" fg:w="31044415435"/><text x="98.8968%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (31,044,415,435 samples, 1.29%)</title><rect x="98.6468%" y="341" width="1.2860%" height="15" fill="rgb(241,220,44)" fg:x="2381312466328" fg:w="31044415435"/><text x="98.8968%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31,044,415,435 samples, 1.29%)</title><rect x="98.6468%" y="325" width="1.2860%" height="15" fill="rgb(235,28,35)" fg:x="2381312466328" fg:w="31044415435"/><text x="98.8968%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (31,044,415,435 samples, 1.29%)</title><rect x="98.6468%" y="309" width="1.2860%" height="15" fill="rgb(210,56,17)" fg:x="2381312466328" fg:w="31044415435"/><text x="98.8968%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (28,100,158,145 samples, 1.16%)</title><rect x="98.7688%" y="293" width="1.1641%" height="15" fill="rgb(224,130,29)" fg:x="2384256723618" fg:w="28100158145"/><text x="99.0188%" y="303.50"></text></g><g><title>_int_free (23,546,320,475 samples, 0.98%)</title><rect x="98.9574%" y="277" width="0.9754%" height="15" fill="rgb(235,212,8)" fg:x="2388810561288" fg:w="23546320475"/><text x="99.2074%" y="287.50"></text></g><g><title>_int_free_merge_chunk (13,065,563,043 samples, 0.54%)</title><rect x="99.3916%" y="261" width="0.5412%" height="15" fill="rgb(223,33,50)" fg:x="2399291318720" fg:w="13065563043"/><text x="99.6416%" y="271.50"></text></g><g><title>_int_free_create_chunk (8,457,245,229 samples, 0.35%)</title><rect x="99.5825%" y="245" width="0.3503%" height="15" fill="rgb(219,149,13)" fg:x="2403899636534" fg:w="8457245229"/><text x="99.8325%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2,412,376,780,134 samples, 99.93%)</title><rect x="0.0016%" y="533" width="99.9336%" height="15" fill="rgb(250,156,29)" fg:x="39547852" fg:w="2412376780134"/><text x="0.2516%" y="543.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (2,412,376,780,134 samples, 99.93%)</title><rect x="0.0016%" y="517" width="99.9336%" height="15" fill="rgb(216,193,19)" fg:x="39547852" fg:w="2412376780134"/><text x="0.2516%" y="527.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (2,412,376,780,134 samples, 99.93%)</title><rect x="0.0016%" y="501" width="99.9336%" height="15" fill="rgb(216,135,14)" fg:x="39547852" fg:w="2412376780134"/><text x="0.2516%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,412,376,780,134 samples, 99.93%)</title><rect x="0.0016%" y="485" width="99.9336%" height="15" fill="rgb(241,47,5)" fg:x="39547852" fg:w="2412376780134"/><text x="0.2516%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,412,376,780,134 samples, 99.93%)</title><rect x="0.0016%" y="469" width="99.9336%" height="15" fill="rgb(233,42,35)" fg:x="39547852" fg:w="2412376780134"/><text x="0.2516%" y="479.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,412,376,780,134 samples, 99.93%)</title><rect x="0.0016%" y="453" width="99.9336%" height="15" fill="rgb(231,13,6)" fg:x="39547852" fg:w="2412376780134"/><text x="0.2516%" y="463.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (2,412,376,780,134 samples, 99.93%)</title><rect x="0.0016%" y="437" width="99.9336%" height="15" fill="rgb(207,181,40)" fg:x="39547852" fg:w="2412376780134"/><text x="0.2516%" y="447.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2,412,376,780,134 samples, 99.93%)</title><rect x="0.0016%" y="421" width="99.9336%" height="15" fill="rgb(254,173,49)" fg:x="39547852" fg:w="2412376780134"/><text x="0.2516%" y="431.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>Day22_rs::main::_{{closure}} (2,412,376,780,134 samples, 99.93%)</title><rect x="0.0016%" y="405" width="99.9336%" height="15" fill="rgb(221,1,38)" fg:x="39547852" fg:w="2412376780134"/><text x="0.2516%" y="415.50">Day22_rs::main::_{{closure}}</text></g><g><title>__GI___clone3 (2,412,385,027,040 samples, 99.93%)</title><rect x="0.0013%" y="581" width="99.9340%" height="15" fill="rgb(206,124,46)" fg:x="31340431" fg:w="2412385027040"/><text x="0.2513%" y="591.50">__GI___clone3</text></g><g><title>start_thread (2,412,385,027,040 samples, 99.93%)</title><rect x="0.0013%" y="565" width="99.9340%" height="15" fill="rgb(249,21,11)" fg:x="31340431" fg:w="2412385027040"/><text x="0.2513%" y="575.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (2,412,376,819,619 samples, 99.93%)</title><rect x="0.0016%" y="549" width="99.9336%" height="15" fill="rgb(222,201,40)" fg:x="39547852" fg:w="2412376819619"/><text x="0.2516%" y="559.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (567,086,001 samples, 0.02%)</title><rect x="99.9361%" y="341" width="0.0235%" height="15" fill="rgb(235,61,29)" fg:x="2412435303728" fg:w="567086001"/><text x="100.1861%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (567,086,001 samples, 0.02%)</title><rect x="99.9361%" y="325" width="0.0235%" height="15" fill="rgb(219,207,3)" fg:x="2412435303728" fg:w="567086001"/><text x="100.1861%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (567,086,001 samples, 0.02%)</title><rect x="99.9361%" y="309" width="0.0235%" height="15" fill="rgb(222,56,46)" fg:x="2412435303728" fg:w="567086001"/><text x="100.1861%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (430,911,658 samples, 0.02%)</title><rect x="99.9417%" y="293" width="0.0179%" height="15" fill="rgb(239,76,54)" fg:x="2412571478071" fg:w="430911658"/><text x="100.1917%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (430,911,658 samples, 0.02%)</title><rect x="99.9417%" y="277" width="0.0179%" height="15" fill="rgb(231,124,27)" fg:x="2412571478071" fg:w="430911658"/><text x="100.1917%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (430,911,658 samples, 0.02%)</title><rect x="99.9417%" y="261" width="0.0179%" height="15" fill="rgb(249,195,6)" fg:x="2412571478071" fg:w="430911658"/><text x="100.1917%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (339,985,266 samples, 0.01%)</title><rect x="99.9692%" y="309" width="0.0141%" height="15" fill="rgb(237,174,47)" fg:x="2413235792940" fg:w="339985266"/><text x="100.2192%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (371,300,157 samples, 0.02%)</title><rect x="99.9833%" y="293" width="0.0154%" height="15" fill="rgb(206,201,31)" fg:x="2413575778206" fg:w="371300157"/><text x="100.2333%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (371,300,157 samples, 0.02%)</title><rect x="99.9833%" y="277" width="0.0154%" height="15" fill="rgb(231,57,52)" fg:x="2413575778206" fg:w="371300157"/><text x="100.2333%" y="287.50"></text></g><g><title>core::ptr::write (371,300,157 samples, 0.02%)</title><rect x="99.9833%" y="261" width="0.0154%" height="15" fill="rgb(248,177,22)" fg:x="2413575778206" fg:w="371300157"/><text x="100.2333%" y="271.50"></text></g><g><title>Day22_rs::next::_{{closure}} (1,535,861,632 samples, 0.06%)</title><rect x="99.9359%" y="357" width="0.0636%" height="15" fill="rgb(215,211,37)" fg:x="2412430483322" fg:w="1535861632"/><text x="100.1859%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (963,955,225 samples, 0.04%)</title><rect x="99.9596%" y="341" width="0.0399%" height="15" fill="rgb(241,128,51)" fg:x="2413002389729" fg:w="963955225"/><text x="100.2096%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (963,955,225 samples, 0.04%)</title><rect x="99.9596%" y="325" width="0.0399%" height="15" fill="rgb(227,165,31)" fg:x="2413002389729" fg:w="963955225"/><text x="100.2096%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (390,566,748 samples, 0.02%)</title><rect x="99.9833%" y="309" width="0.0162%" height="15" fill="rgb(228,167,24)" fg:x="2413575778206" fg:w="390566748"/><text x="100.2333%" y="319.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1,549,870,850 samples, 0.06%)</title><rect x="99.9357%" y="437" width="0.0642%" height="15" fill="rgb(228,143,12)" fg:x="2412425696525" fg:w="1549870850"/><text x="100.1857%" y="447.50"></text></g><g><title>Day22_rs::main::_{{closure}} (1,549,870,850 samples, 0.06%)</title><rect x="99.9357%" y="421" width="0.0642%" height="15" fill="rgb(249,149,8)" fg:x="2412425696525" fg:w="1549870850"/><text x="100.1857%" y="431.50"></text></g><g><title>Day22_rs::next (1,549,870,850 samples, 0.06%)</title><rect x="99.9357%" y="405" width="0.0642%" height="15" fill="rgb(243,35,44)" fg:x="2412425696525" fg:w="1549870850"/><text x="100.1857%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,545,084,053 samples, 0.06%)</title><rect x="99.9359%" y="389" width="0.0640%" height="15" fill="rgb(246,89,9)" fg:x="2412430483322" fg:w="1545084053"/><text x="100.1859%" y="399.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,545,084,053 samples, 0.06%)</title><rect x="99.9359%" y="373" width="0.0640%" height="15" fill="rgb(233,213,13)" fg:x="2412430483322" fg:w="1545084053"/><text x="100.1859%" y="383.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (1,549,936,964 samples, 0.06%)</title><rect x="99.9357%" y="565" width="0.0642%" height="15" fill="rgb(233,141,41)" fg:x="2412425692759" fg:w="1549936964"/><text x="100.1857%" y="575.50"></text></g><g><title>__libc_start_call_main (1,549,936,964 samples, 0.06%)</title><rect x="99.9357%" y="549" width="0.0642%" height="15" fill="rgb(239,167,4)" fg:x="2412425692759" fg:w="1549936964"/><text x="100.1857%" y="559.50"></text></g><g><title>main (1,549,933,198 samples, 0.06%)</title><rect x="99.9357%" y="533" width="0.0642%" height="15" fill="rgb(209,217,16)" fg:x="2412425696525" fg:w="1549933198"/><text x="100.1857%" y="543.50"></text></g><g><title>std::rt::lang_start_internal (1,549,933,198 samples, 0.06%)</title><rect x="99.9357%" y="517" width="0.0642%" height="15" fill="rgb(219,88,35)" fg:x="2412425696525" fg:w="1549933198"/><text x="100.1857%" y="527.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (1,549,933,198 samples, 0.06%)</title><rect x="99.9357%" y="501" width="0.0642%" height="15" fill="rgb(220,193,23)" fg:x="2412425696525" fg:w="1549933198"/><text x="100.1857%" y="511.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,549,933,198 samples, 0.06%)</title><rect x="99.9357%" y="485" width="0.0642%" height="15" fill="rgb(230,90,52)" fg:x="2412425696525" fg:w="1549933198"/><text x="100.1857%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,549,933,198 samples, 0.06%)</title><rect x="99.9357%" y="469" width="0.0642%" height="15" fill="rgb(252,106,19)" fg:x="2412425696525" fg:w="1549933198"/><text x="100.1857%" y="479.50"></text></g><g><title>Day22_rs::main (1,549,933,198 samples, 0.06%)</title><rect x="99.9357%" y="453" width="0.0642%" height="15" fill="rgb(206,74,20)" fg:x="2412425696525" fg:w="1549933198"/><text x="100.1857%" y="463.50"></text></g><g><title>_start (1,549,947,220 samples, 0.06%)</title><rect x="99.9357%" y="581" width="0.0642%" height="15" fill="rgb(230,138,44)" fg:x="2412425692756" fg:w="1549947220"/><text x="100.1857%" y="591.50"></text></g><g><title>all (2,413,978,624,403 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(235,182,43)" fg:x="0" fg:w="2413978624403"/><text x="0.2500%" y="623.50"></text></g><g><title>Day22_rs (2,413,978,624,403 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(242,16,51)" fg:x="0" fg:w="2413978624403"/><text x="0.2500%" y="607.50">Day22_rs</text></g></svg></svg>